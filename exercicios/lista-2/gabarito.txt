-- Turma: 2TDST
-- RM: 92895
-- Nome: Vinicius Yuji Nishioka
--
-- PS: Tive problemas para tirar prints usando o banco da FIAP

-- 1.

CREATE OR REPLACE PROCEDURE PRC_INSERE_PEDIDO_RM92895 (
    P_COD_PEDIDO PEDIDO.COD_PEDIDO%TYPE, 
    P_COD_PEDIDO_RELACIONADO PEDIDO.COD_PEDIDO_RELACIONADO%TYPE,
    P_COD_CLIENTE PEDIDO.COD_CLIENTE%TYPE,
    P_COD_USUARIO PEDIDO.COD_USUARIO%TYPE,
    P_COD_VENDEDOR PEDIDO.COD_VENDEDOR%TYPE,
    P_VAL_TOTAL_PEDIDO PEDIDO.VAL_TOTAL_PEDIDO%TYPE, 
    P_VAL_DESCONTO PEDIDO.VAL_DESCONTO%TYPE,
    P_SEQ_ENDERECO_CLIENTE PEDIDO.SEQ_ENDERECO_CLIENTE%TYPE,
    P_DAT_PEDIDO PEDIDO.DAT_PEDIDO%type, 
    P_DAT_ENTREGA PEDIDO.DAT_ENTREGA%TYPE,
    P_DAT_CANCELAMENTO PEDIDO.DAT_CANCELAMENTO%TYPE) IS
BEGIN 
    IF (P_DAT_PEDIDO) > (P_DAT_ENTREGA) OR 
        (P_DAT_PEDIDO) > (SYSDATE) THEN 
            RAISE_APPLICATION_ERROR(-20001, 'Data incorreta.'); 
    END IF; 
    IF (P_VAL_TOTAL_PEDIDO) <= 0 THEN 
        RAISE_APPLICATION_ERROR(-20002, 'Valor do Pedido incorreto.'); 
    END IF; 
    INSERT INTO PEDIDO ( 
        cod_pedido, 
        cod_pedido_relacionado,
        cod_cliente,
        cod_usuario,
        cod_vendedor,
        val_total_pedido,
        val_desconto,
        seq_endereco_cliente,
        dat_pedido, 
        dat_entrega,
        dat_cancelamento)
    VALUES (
        p_cod_pedido, 
        p_cod_pedido_relacionado,
        p_cod_cliente,
        p_cod_usuario,
        p_cod_vendedor,
        p_val_total_pedido,
        p_val_desconto,
        p_seq_endereco_cliente,
        p_dat_pedido, 
        p_dat_entrega,
        p_dat_cancelamento);
    COMMIT;
END PRC_INSERE_PEDIDO_RM92895;

EXECUTE PRC_INSERE_PEDIDO_RM92895(1001, 1001, 1001, 1001, 101, 28, 10, 10, sysdate, sysdate+10, sysdate+10);

-- 2.

CREATE OR REPLACE FUNCTION FUN_CONSULTA_PED_RM92895 (p_cod_pedido IN NUMBER) 
RETURN NUMBER IS
    v_cod_cliente NUMBER(10);
BEGIN
    SELECT cod_pedido INTO v_cod_cliente FROM pedido WHERE cod_cliente = v_cod_cliente;
    RETURN v_cod_cliente;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Pedido nao encontrado.';
    WHEN OTHERS THEN
        RETURN 'Erro na consulta.';
END;

EXECUTE FUN_CONSULTA_PED_RM92895(1001);

-- 3.

CREATE OR REPLACE FUNCTION FUN_TOTAL_PEDIDO_RM92895(p_cod_cliente NUMBER)
RETURN NUMBER
IS
  v_total_pedidos NUMBER := 0;
BEGIN
  SELECT SUM(valor_total) INTO v_total_pedidos FROM pedido WHERE cod_cliente = p_cod_cliente;
  RETURN v_total_pedidos;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 0;
  WHEN OTHERS THEN
    RETURN NULL;
END;

EXECUTE FUN_TOTAL_PEDIDO_RM92895(1001);

-- 4.

CREATE OR REPLACE FUNCTION FUN_INSERE_NF2_RM92895 (p_cod_pedido NUMBER, p_cod_cliente NUMBER)
RETURN VARCHAR2
IS
  v_cod_cliente NUMBER(10);
BEGIN
  SELECT cod_cliente INTO v_cod_cliente FROM pedido WHERE cod_pedido = p_cod_pedido;
  
  IF v_cod_cliente IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Codigo do cliente nao encontrado.');
  END IF;
  
  INSERT INTO pedido(cod_pedido, cod_cliente)
  VALUES (p_cod_pedido, v_cod_cliente);

  RETURN 'Pedido inserido com sucesso.';
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'Pedido não encontrado.';
  WHEN INCONSISTENCIA_DADOS THEN
    RETURN 'Erro de consistência de dados.';
  WHEN OTHERS THEN
    RETURN 'Erro ao inserir pedido.';
END;

EXECUTE FUN_INSERE_NF2_RM92895(1001, 1001);

-- 5.

CREATE OR REPLACE FUNCTION FUN_VALIDA_PRODUTO_RM92895(p_cod_produto NUMBER)
RETURN BOOLEAN
IS
  v_produto_encontrado NUMBER := 0;
BEGIN
  SELECT COUNT(*) INTO v_produto_encontrado FROM produto WHERE cod_produto = p_cod_produto;
  
  IF v_produto_encontrado > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN FALSE;
  WHEN OTHERS THEN
    RETURN FALSE;
END;

EXECUTE FUN_VALIDA_PRODUTO_RM92895(10);