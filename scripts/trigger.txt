CREATE TABLE PEDIDO_NOVO AS SELECT * FROM PEDIDO;
ALTER TABLE PEDIDO_NOVO ADD STATUS VARCHAR2(30);
SELECT * FROM PEDIDO_NOVO;

CREATE OR REPLACE TRIGGER TRG_PEDIDO
    BEFORE INSERT ON PEDIDO_NOVO
    FOR EACH ROW
BEGIN
-- Atualiza o status do pedido para "Novo"
    IF :NEW.STATUS IS NULL THEN
        :NEW.STATUS := 'Novo Pedido';
    END IF;
END;

CREATE TABLE TB_AUDITORIA (
    ID NUMBER GENERATED ALWAYS AS IDENTITY,
    TABELA VARCHAR2(30),
    OPERACAO VARCHAR2(30),
    DATA DATE,
    USUARIO VARCHAR2(30)
)

CREATE OR REPLACE TRIGGER TRG_AUDITORIA
    AFTER INSERT OR UPDATE OR DELETE ON PEDIDO_NOVO
    FOR EACH ROW
DECLARE
    OPERACAO VARCHAR2(30);
    NOME_USUARIO VARCHAR2(100);
BEGIN
    -- Determina a operacao realizada (INSERT, UPDATE, DELETE)
    IF INSERTING THEN
        OPERACAO := 'INSERT';
    ELSIF UPDATING THEN
        OPERACAO := 'UPDATE';
    ELSIF DELETING THEN
        OPERACAO := 'DELETE';
    END IF;
    -- Obtem o nome de usuario da sessao atual
    NOME_USUARIO := SYS_CONTEXT('USERENV', 'SESSION_USER');
    -- Registra a auditoria na tabela de auditoria
    INSERT INTO TB_AUDITORIA
        (TABELA, OPERACAO, DATA, USUARIO)
    VALUES
        ('PEDIDO_NOVO', OPERACAO, SYSDATE, NOME_USUARIO);
END;